# -*- coding: utf-8 -*-
"""EMP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nAHgM0RLf711SwFjNNTjyYFHmlKFncya
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import classification_report

df = pd.read_csv("/content/EmployeePromotion.csv", sep=',')

df.head()

#HANDLING NULL VALUES

df['education'] = df['education'].fillna(df['education'].mode()[0])
df['previous_year_rating'] = df['previous_year_rating'].fillna(df['previous_year_rating'].mode()[0])

df = df[df['length_of_service'] > 13]

df['sum_metric'] = df['awards_won?']+df['KPIs_met >80%'] + df['previous_year_rating']
df['total_score'] = df['avg_training_score'] * df['no_of_trainings']

df = df.drop(['recruitment_channel', 'region', 'employee_id'], axis = 1)

df['education'] = df['education'].replace(("Master's & above", "Bachelor's", "Below Secondary"),(3, 2, 1))

le = LabelEncoder()
df['department'] = le.fit_transform(df['department'])
df['gender'] = le.fit_transform(df['gender'])

#splitting data

X = df.iloc[::-1]
Y = df['is_promoted']

#splitting dataset
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 42)

sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_valid = sc.transform(x_test)

model = GradientBoostingClassifier(learning_rate=0.4,n_estimators=300,max_depth=20,random_state=0)
model.fit(x_train,y_train)

print(model.score(x_train,y_train))
print(model.score(x_test,y_test))

pred = model.predict(x_test)
print(classification_report(pred,y_test))

import pickle

filename = 'employee_prom.sav'
pickle.dump(model, open(filename, 'wb'))

# loading the saved model
loaded_model = pickle.load(open('employee_prom.sav', 'rb'))

for column in X.columns:
  print(column)